
Learn AngularJS
Workspace ready

Code Editor
Open files here to edit them
Save
Objective
Reader is creating an AngularJS app for their e-reader service. Here's what it looks like.

The app displays a list of books on the home page.
When you click on a book, it takes you to the book's description.
When you click the Read button, it takes you to the book's first chapter. From there, you can use the Forward and Back buttons to read the book.
Tasks
9/9Complete
Mark each task as complete by checking them off
1.
In the view inside the <head> element, include angular-route.js as a new <script> element.
2.
In app.js, inject ngRoute into the module's dependency array so that routing is available for the app to use.
3.
In app.js, define the app's routes:

Use app.config() and $routeProvider to set up the routes.
Map the URL /books to the controller BookshelfController and the template views/bookshelf.html.
Otherwise, redirect to /books.
4.
Create a service named books for getting data from the books API. Create the service in a new file named js/services/books.js. Include this new JavaScript file in the view as a script element.

The books API is a JSON object containing an array of books. Here's how a single book is represented in this array:
{
  "title": "Metamorphosis",
  "cover": "img/metamorphosis.jpg",
  "author": "Franz Kafka",
  "description": "Gregor Samsa turns into a large insect-like creature.",
  "chapters": [
    {
      "title": "I",
      "paragraphs": ["paragraph 1", "paragraph 2"]
    },
    {
      "title": "II",
      "paragraphs": ["paragraph 1", "paragraph 2", "paragraph 3", "paragraph 4"]
    },
    {
      "title": "III",
      "paragraphs": ["paragraph 1", "paragraph 2", "paragraph 3"]
    }
  ]
}
Each book has a title, cover, author, description, and array of chapters. Each chapter has a title and array of paragraphs.
5.
Set up the controller BookshelfController and the template views/bookshelf.html:

In the controller BookshelfController, use the books service to load data from the server into the $scope.myBooks.
Finish the template views/bookshelf.html so that it displays each book.
Notice in views/bookshelf.html, we're using <a href="#/books/{{ $index }}"> to create a URL for each book. The $index gives the index of a book in the myBooks array. This means the URL of the first book is #/books/0, the URL of the second book is #/books/1, and so forth.
6.
In the view in the main section, add <div ng-view></div>.
7.
View the result by visiting http://localhost:8000 in the browser. When you visit /books, a view is constructed by injecting views/bookshelf.html into the <div ng-view></div> in index.html.
8.
When a user clicks on a book, she should go to the book's description. Let's set this up next, following the same sequence of steps from above:

In app.js, add another route. Map the URL /books/:bookId to the controller BookController and the template views/book.html.
In BookController, use the books service to load a single book into the $scope.book property. To do this, use the books service to fetch an array of books from the server, and then use $routeParams.bookId to access the specific book by its index. Store the specific book into $scope.book.
Remember we can use Angular's $routeParams to retrieve bookId from the URL by using $routeParams.bookId.
Finish the template in views/book.html to display a book's description. Looking at the format of the data in books API given above, display a book's cover, title, author, and description.
View the result in the browser. When you click on a book, a view is constructed by injecting views/book.html into the <div ng-view></div> in index.html.
9.
When a user clicks on the Read button, she should go to the book's first chapter. From there, she can use the Next and Back buttons to read the book. Let's set this up next, following the same sequence of steps from above:

In app.js, add another route. Map the URL /books/:bookId/chapters/:chapterId to the controller ChapterController and the template views/chapter.html.
In ChapterController, use the books service to load a single chapter into the $scope.chapter property. To do this, in line 4 first get a specific book from the books API by using its index, just as you did in BookController. Store the specific book into $scope.book.
Under it, access the array of chapters inside $scope.book, and get a specific chapter in the array by using its index $routeParams.chapterId. Store the specific chapter into $scope.chapter.
Finish the template in views/chapter.html to display a chapter. Looking at the format of the data in books API given above, display the book title, book author, chapter title, and chapter paragraphs.
View the result in the browser. When you click on the Read button, a view is constructed by injecting views/chapter.html into the <div ng-view></div> in index.html. When you click on the Next and Back buttons, you navigate from chapter to chapter.
Report a Bug
If you see a bug, please report it using the form below.

I don't understand this error message

There's a problem with the interface

There's something wrong with the instructions

Other

Please describe your problem.
SUBMIT
Report a Bug
Reader
9/9Complete
Up Next
Get Help

css

back.svg

main.css

next.svg

img

drjekyllmrhyde.jpg

heartofdarkness.jpg

metamorphosis.jpg

js

controllers

BookController.js

BookshelfController.js

ChapterController.js

services

books.js

vendor

angular.min.js

app.js

views

bookshelf.html

chapter.html

book.html

index.html
body, html {
    font-family: Georgia, serif;
    margin: 0;
    padding: 0;
}

.header {
    font-size: 48px;
    padding: 40px 0;
    text-align: center;
}

.container {
    position: relative;
    width: 100%;
}

.main {
    padding: 40px 0;
}

.bookshelf {
    background: rgb(255,255,255); /* Old browsers */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(237,237,237,1))); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* Chrome10+,Safari5.1+ */
    background: -ms-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* IE10+ */
    background: linear-gradient(to bottom,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* W3C */
}

.book {
    background: rgb(255,255,255); /* Old browsers */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(237,237,237,1))); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* Chrome10+,Safari5.1+ */
    background: -ms-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* IE10+ */
    background: linear-gradient(to bottom,  rgba(255,255,255,1) 0%,rgba(237,237,237,1) 100%); /* W3C */
    height: 400px;
    position: relative;
}

.book:hover {
    background: rgb(255,255,255); /* Old browsers */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(255,81,84,1))); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(255,81,84,1) 100%); /* Chrome10+,Safari5.1+ */
    background: -ms-linear-gradient(top,  rgba(255,255,255,1) 0%,rgba(255,81,84,1) 100%); /* IE10+ */
    background: linear-gradient(to bottom,  rgba(255,255,255,1) 0%,rgba(255,81,84,1) 100%); /* W3C */
}

.bookshelf img {
    bottom: 0;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.15);
    left: 50%;
    margin-left: -80px;
    position: absolute;
    right: 0;
    width: 160px;
}

.book a {
    color: #000;
}

.book:hover a {
    text-decoration: none;
}

.book h3, .book-detail h3, .chapter .title {
    font-family: "Roboto", sans-serif;
    font-weight: 900;
    margin: 0;
    padding: 20px;
}

.book p {
    padding: 0 20px;
}

.book-detail {
    margin: 0 auto 0;
    position: relative;
    width: 75%;
}

.book-detail img {
    width: 240px;   
}
  
.book-detail h3, .chapter .title {
    padding: 20px 0;
}

.book-detail p {
    font-size: 16px;
}

.button {
    background: #ff2c4b;
    color: #fff;
    display: block;
    font-family: "Roboto", sans-serif;
    height: 40px;
    line-height: 40px;
    margin: 20px 0;
    text-align: center;
    width: 200px;
}

.button:hover {
    background: #cc2344;
    color: #fff;
    text-decoration: none;
}

.back, .next {
    background: url('back.svg') center center #ff2c4b;
    background-size: 80px 80px;
    border-radius: 100%;
    height: 80px;
    left: 20px;
    margin-top: -40px;
    position: fixed;
    text-indent: -9999px;
    top: 50%;
    width: 80px;
}

.next {
    background: url('next.svg') center center #ff2c4b;
    left: auto;
    right: 20px;   
}

.back:hover {
    background: url('back.svg') center center #cc2344;
    background-size: 80px 80px;
}

.next:hover {
    background: url('next.svg') center center #cc2344;
    background-size: 80px 80px;
}

.chapter {
    margin: 0 auto 0;
    width: 50%;   
}

.chapter-title {
    font-family: "Roboto", sans-serif;
    font-size: 36px;
    font-weight: 900;
}

.chapter p {
    font-size: 18px;
    line-height: 30px;
    margin: 10px 0 26px;
}

.author {
    font-style: italic;   
}

@media (max-width: 1170px) {
  .back, .next {
    background-size: 40px 40px;
    height: 40px;
    width: 40px;
  }    
}
